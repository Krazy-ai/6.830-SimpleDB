package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator childOperator1;
    private OpIterator childOperator2;
    private TupleDesc td1;
    private TupleDesc td2;
    private Tuple t1; //用于固定外循环的tuple

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinPredicate = p;
        childOperator1 = child1;
        childOperator2 = child2;
        td1 = child1.getTupleDesc();
        td2 = child2.getTupleDesc();
        t1 = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return childOperator1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return childOperator2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(td1, td2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        childOperator1.open();
        childOperator2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        childOperator1.close();
        childOperator2.close();

    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        childOperator1.rewind();
        childOperator2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //TODO 回顾，用t1固定外循环，不然每次只加外循环
        while(childOperator1.hasNext()||t1!=null){
            if(t1==null&&childOperator1.hasNext()) {
                t1=childOperator1.next();
            }
            while(childOperator2.hasNext()){
                Tuple t2 = childOperator2.next();
                if (joinPredicate.filter(t1, t2)){
                    TupleDesc td = getTupleDesc();
                    Tuple t = new Tuple(td);
                    //t.setRecordId(t1.getRecordId());
                    for (int i = 0; i < td1.numFields(); i++) {
                        t.setField(i, t1.getField(i));
                    }
                    for (int i = 0; i < td2.numFields(); i++) {
                        t.setField(i+td1.numFields(), t2.getField(i));
                    }
                    return t;
                }
            }
            childOperator2.rewind();
            t1 = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{this.childOperator1, this.childOperator2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        if (this.childOperator1 != children[0]) {
            this.childOperator1 = children[0];
        }
        if (this.childOperator2 != children[1]) {
            this.childOperator2 = children[1];
        }
    }

}
